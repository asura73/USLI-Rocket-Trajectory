function xvecvec = traject

clear
clc
close all

d2r = pi / 180;
r2d = 1 / d2r;
in2m = 0.025;
m2in = 1 / in2m;
ft2m = .3048;
m2ft = 1 / ft2m;

% declare global vars

global pin;
global boost;

% atmosphere parameters

Pgl = 1;
rhogl = 1;

% rocket parameters

dia = 4.03*25.4/1000; % m
area = pi * (dia/2)^2; % m^2
m0 = 10.7 * 0.45; % kg
cd_r = 0.5; % rocket cd
pin = 1*in2m; % pin extention
boost = 1; % start with motor on

% state space

rvec0 = [0;0;0]; % position in NWZ
rvecd0 = [0;0;0]; % velocity in NWZ
avec0 = [0;5;0].*d2r; % orientation

xvec0 = [rvec0;rvecd0;avec0;m0]

% setup ode45

odeOptions = odeset('RelTol',1e-6,'AbsTol',1e-6,'Events',@events);
[TOUT, xvecOUT] = ode45(@ascent, [0 1000], xvec0, odeOptions);

x_r = xvecOUT(:,1);
y_r = xvecOUT(:,2);
z_r = xvecOUT(:,3);

x_r = x_r * m2ft;
y_r = y_r * m2ft;
z_r = z_r * m2ft

v_r = xvecOUT(:,6);

v_r = v_r * m2ft;

m_r = xvecOUT(:,10);
%plot(TOUT,z_r)
plot3(x_r,y_r,z_r)
axis equal
end

function xvecd = ascent(t, xvec)

global boost;
global pin;

if t > 6.4
    boost = 0;
end

d2r = pi / 180;

% xvec = [rvec ; rvecd ; avec ; m]
% xvecd = [rvecd ; rvecdd ; avecd ; md]

rvec = xvec(1:3);
rvecd = xvec(4:6);
avec = xvec(7:9);
m = xvec(10);


% get atmosphereic conditions

rho = 1.225;

g = 9.81;
% get rocket conditions

cD_r = 0.5;
cD_p = 0.5;

% sum forces on rocket in rocket frame


% drag = .5 * rho * S * V^2 * cD

drag_r = .5*rho*.0082*norm(rvecd)^2*cD_r;
drag_p = 0;

v = norm(rvecd);
if v ~= 0
    rvecdhat = rvecd ./ v;
else
    rvecdhat = [0;0;0];
end

dragvec = -1*(drag_r+drag_p)*rvecdhat;

if boost == 1
    %T = thrust(t);
    T = 150; % N
    %delm = .951 - .355;
    %6.34
    md = -0.09400630915;
else
    T = 0;
    md = 0;
end

F_ijk  = [0;0;T] + dragvec;
F_nwz = rotmat(2,5*d2r)*F_ijk - [0;0;m*g];

% xvecd = [rvecd ; rvecdd ; avecd ; md]

% newton's second law
rvecdd = F_nwz ./ m;

xvecd = [rvecd; rvecdd; 0;0;0;md];

end

function [value,isterminal,direction] = events(t,xvec)

    % end solution when vertical velocity equals zero
    
    value = xvec(6);
    isterminal = 1;
    direction = -1;
end

function parseThrust

end

function T = thrust(t)

t = [0 0.004 0.03
      <eng-data  t="0." f="0." m="596." cg="250."/>
      <eng-data  t="0.004" f="33.051" m="595.958" cg="250."/>
      <eng-data  t="0.03" f="324.576" m="593.021" cg="250."/>
      <eng-data  t="0.12" f="248.729" m="576.72" cg="250."/>
      <eng-data  t="0.617" f="225." m="502.338" cg="250."/>
      <eng-data  t="1.385" f="201.271" m="398.912" cg="250."/>
      <eng-data  t="2.306" f="183.475" m="286.964" cg="250."/>
      <eng-data  t="3.425" f="177.119" m="159.487" cg="250."/>
      <eng-data  t="4.149" f="123.729" m="90.6746" cg="250."/>
      <eng-data  t="4.934" f="79.661" m="40.2339" cg="250."/>
      <eng-data  t="5.59" f="42.373" m="14.9428" cg="250."/>
      <eng-data  t="6.318" f="19.492" m="0.714326" cg="250."/>
      <eng-data  t="6.434" f="0." m="0." cg="250."/>

end

function [Time,Height,velocity]=trajectory

n = 1000;

%Initial Condition 

p0 = 2.1162*10^3; % Air Pressure at 0ft (lb/ft^2)
r0 = 2.3769*10^-3; % Air Density at 0ft (slugs/ft^3)
d = 4;            % Diameter of rocket (ft)
A = (d/2)^2*pi;     % Cross Sectional Area of rocket (ft^2)
Mp = 1.25156;     %Propellant Mass (lb)
Mi = 10.7;     %Initial Launch Mass (lb)
It = 213.4;      %Total Impulse (Pound-Seconds)
Tf = 6.40;      %Burn Time (s)
Thrust = 33.4;      %Average Thrust (lb)
R = 1545.4;     % Gas constant (ft*lbf/(lbmol*R))
g = 32.2;
Cd = 0.5;
theta = 5/180*pi;

initial = [[0;0;0];[0;0;0];Mi;theta];
time = linspace(0,Tf,n); 


[Tb, Ub] = ode45(@boost, [0 20], initial);


function xvecd =boost(t, U)
    %Differential Equation Function for Solving with ode45
    %Inputs: Time, Input Vector
    %Input Vector: velocity,height,mass
    %Outputs: Output Vector
    %Output Vector: acceleration,velocity,mass rate of change
    
    r2d = 180 / pi;
    d2r = 1/r2d;
    
    %Unpack Vector
    Vr = U(1:3);  %Velocity
    Hr = U(4:6);  %Position
    Mr = U(7);  %Mass
    Ang = U(8);
    
    h = Hr(3);
    T = ((15-0.0065*h)+273)*1.8;  %temperature(R) at a given altitude from
                                  %Toussaint's Formula
    p = p0*exp(-g/(R*T))*h; %Pressure at a given altitude
    %Calculate Acceleration
    
    Tvec_nwz = inv(rotmat(2,Ang))*[0;0;Thrust]; 
     
    %A_rocket = [0;0;(Thrust/Mr -g-.5/Mr*Cd*p*A*Vr(3)^2)];
    %Vr(3)=A_rocket*Tf/n;

    rvecd_NWZ = Vr;
    rvecd_IKJ = rotmat(2,5*d2r)*rvecd_NWZ;
    
    
    F_khat = Thrust-Mr*g-.5*rho*A*rvecd_IJK(3)^2*Cd;
    Fvec_IJK = [0;0;F_khat];
    Fvec_NWZ = inv(rotmat(2,Ang))*Fvec_IJK;
    
    % N2L
    
    rvecdd_NWZ = Fvec_NWZ ./ Fvec_NWZ;
    
        
    %Calculate Mass Rate of Change as Function of Current Thrust
    md = -Ft*Mp/It;
    
    % repack deriv
    % xvec = [ rvec ; rvecd ; m ; angle ]
    % xvecd = [ revd_nwz ; rvecdd_nwz ; md ; angled_nwz ]
    
    xvecd = [ rvecd_NWZ; rvecdd_NWZ; md; 0]

    %Pack Result Vector
    %res = [A_rocket; Vr; dM];
end


function ans = thrust(t)
%Returns Thrust of C6 Rocket at time t after ignition
%Uses Linear Interpolation from data on data sheet
%Inputs: t, Outputs: Thrust

    %Load Data from Data Sheet
    T = [0 0.0310 0.0920 0.1390 0.1920 0.2090 0.2310 0.2480 0.2920 ...
        0.3700 0.4750 0.6710 0.7020 0.7230 0.8500 1.0630 1.2110 1.2420 ...
        1.3030 1.4680 1.6560 1.8210 1.8340 1.8470 1.8600];
    F = [0 0.9460 4.8260 9.9360 14.0900 11.4460 7.3810 6.1510 5.4890 ...
        4.9210 4.4480 4.2580 4.5420 4.1640 4.4480 4.3530 4.3530 4.0690 ...
        4.2580 4.3530 4.4480 4.4480 2.9330 1.3250 0];
    
    %If Not in Range, Return No Thrust
    %If In Range, Return Linear Interpolation based on Data from Data Sheet
    if(t < T(1) || t > T(end))
        ans = 0;
    else
        ans = interp1(T,F,t);
    end
    
end
    
%%%%%%%%%%%%%%%%%%%
%%% COAST PHASE %%%
%%%%%%%%%%%%%%%%%%%

%Setup Initial Conditions and run ODE45 Solver
initial = Ub(end,:);
time = linspace(Tb(end),Tb(end)+10,n);
options = odeset('Events', @events);
[Tc, Uc] = ode45(@coast, time, initial,options);

function res=coast(t, U)
    %Differential Equation Function for Solving with ode45
    %Inputs: Time, Input Vector
    %Input Vector: velocity,height,mass
    %Outputs: Output Vector
    %Output Vector: acceleration,velocity,mass rate of change

    %Unpack Vector
    H_Dot = U(1);  %Velocity
    H     = U(2);  %Height
    M     = U(3);  %Mass

    %Get Current Thrust
    Ft = thrust(t);  %Rocket Thrust

    %Calculate Acceleration
    H_DDot = Ft/M - g - .5/M*Cd*p*A*H_Dot^2;

    %Pack Result Vector
    res = [H_DDot; H_Dot; 0];
end

function [value,isterminal,direction] = events(t,W)
    %Used by odeset to determine end condition for Coast Phase
    %End condition is Velocity = 0
    %Input: Time, [Velocity, Position, Mass]

    value = W(1);
    isterminal = 1;
    direction = -1;
end

%%%%%%%%%%%%%%%%%%%%%%
%%% COMBINE PHASES %%%
%%% & RETURN H(T)  %%%
%%%%%%%%%%%%%%%%%%%%%%

T  = [Tb;Tc];
Ht = [Ub(:,2);Uc(:,2)];

end